#!/usr/bin/env bash
set -e

# This scripts reads the following env vars:
#
# DRY_RUN - echo the apply/delete commands instead of running them
# RESYNC_ITERS - force a full sync after this number of iterations
#
# Default values are used if not provided

run=''
if [ -n "$DRY_RUN" ]; then
	run=echo
fi
if [ -z "$RESYNC_ITERS" ]; then
	RESYNC_ITERS=100
fi

function get_workers_names() {
	kubectl get nodes -o jsonpath='{range .items[*]}{.metadata.name}{"\n"}{end}'
}

function create_endpoint_yaml() {
	local node_name="$1"
	local template='./host-endpoint.yaml.tmpl'

	export node_name
	envsubst < "$template"
}

echo "Starting"
iters_nr=0
nodes_list_old=''
nodes_list_new=''
while true; do
	nodes_list_new="$(get_workers_names | sort)"

	# This commands may seem weird, but are rather trivial:
	# comm -13 outputs what is unique to the second file, i.e new nodes
	# comm -23 outputs what is unique to the first file, i.e. deleted nodes
	new_nodes=$(comm -13 <(echo "$nodes_list_old") <(echo "$nodes_list_new"))
	deleted_nodes=$(comm -23 <(echo "$nodes_list_old") <(echo "$nodes_list_new"))

	for node_name in $new_nodes; do
		echo "Creating endpoint for $node_name"
		create_endpoint_yaml $node_name | $run kubectl apply -f -
	done

	for node_name in $deleted_nodes; do
		echo "Deleting endpoint for $node_name"
		create_endpoint_yaml $node_name | $run kubectl delete -f -
	done

	# Wait some time to not do a busy loop
	# Let's wait until watching reports a change
	echo "Waiting for node watch"
	$run kubectl get nodes --watch-only | head -n 1 > /dev/null

	nodes_list_old="$nodes_list_new"

	# Empty the old file every few iters to force a full-sync
	iters_nr=$(($iters_nr+1))
	if [ "$iters_nr" -eq "$RESYNC_ITERS" ]; then
		echo "Forcing full sync"
		iters_nr=0
		unset nodes_list_old
	fi
done
